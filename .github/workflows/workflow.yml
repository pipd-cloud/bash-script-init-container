name: CI

on:
  schedule:
    - cron: "0 0 * * 0" # Run every week on Sunday at 00:00 UTC
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  actions: write # Used to clear the cache
  contents: read # Used to read the content of the repository
  packages: write # Used to read and write to the GitHub Container Registry
  id-token: write # Used to perform authentication using Docker
  attestations: write # Used to write the attestations
  security-events: write # Used to write vulnerability reports and SBOMs

jobs:
  # Invalidate the cache if the workflow is triggered by the schedule event
  invalidate:
    name: Invalidate Cache
    if: ${{ github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4

      - name: Invalidate cache
        shell: bash
        run: |
          gh cache delete --all

  # Build and push the Docker image
  build:
    needs: invalidate
    if: always()
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build-push-image.outputs.digest }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: install-buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          labels: |
            maintainer=tionichm
            org.opencontainers.image.title="bash-script-init-container"
            org.opencontainers.image.description="A container image that provides a minimal environment that can be used to run bash scripts with common utilities pre-installed."
          tags: |
            type=sha,format=long
            type=raw,value=latest

      - name: Build and push the Task Container Image
        id: build-push-image
        uses: docker/build-push-action@v6
        with:
          push: true
          args: |
            ${{ vars.PACKAGES && format('PACKAGES={0}', vars.PACKAGES) || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Generate vulnerability report for the image
  scan:
    name: Generate Vulnerability Report
    needs: build
    if: ${{ always() && needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Scan the Docker image with Trivy
        id: scan-image
        uses: aquasecurity/trivy-action@master
        with:
          scanners: vuln
          severity: CRITICAL,HIGH,MEDIUM
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          format: sarif
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          output: "${{ github.workspace }}/trivy-results.sarif"

      - name: Upload trivy vulnerability report as a Github artifact
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/trivy-results.sarif

  # Generate SBOM for the image
  sbom:
    name: Generate SBOM
    needs: build
    runs-on: ubuntu-latest
    if: ${{ always() && needs.build.result == 'success' }}
    steps:
      - name: Generate SBOM for the Docker image
        id: image-sbom
        uses: aquasecurity/trivy-action@master
        with:
          scanners: vuln
          severity: CRITICAL,HIGH,MEDIUM
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          format: github
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          output: "${{ github.workspace }}/trivy-results.sbom.json"

      - name: Upload trivy SBOM report as a Github artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-report
          path: "${{ github.workspace }}/trivy-results.sbom.json"
          retention-days: 30

  # Generate attestation for the image
  attest:
    name: Generate Attestation
    needs: build
    runs-on: ubuntu-latest
    if: ${{ always() && needs.build.result == 'success' }}
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate attestation for the image
        id: attest-image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          subject-digest: ${{ needs.build.outputs.digest }}
          push-to-registry: true
