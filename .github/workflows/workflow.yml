name: CI
on:
  schedule:
    # Run every week on Sunday at 00:00 UTC
    - cron: "0 0 * * 0"
  push:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write
  security-events: write
env:
  PACKAGES: "wget curl jq aws-cli"
jobs:
  # Invalidate the cache if the workflow is triggered by the schedule event
  invalidate:
    name: Invalidate Cache
    # if: ${{ github.event_name == 'schedule'}}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Clear the Github Actions cache
      - name: Invalidate cache
        shell: bash
        run: |
          gh cache delete --all

  build:
    needs: invalidate
    if: always()
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build-push-image.outputs.digest }}
    steps:
      # Checks out the current repository
      - name: Checkout Git repository
        uses: actions/checkout@v4

      # Log into GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: install-buildx
        uses: docker/setup-buildx-action@v3

      # Prepares Docker metadata for tagging and labeling
      - name: Prepare Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          labels: |
            maintainer=tionichm
            org.opencontainers.image.title="bash-script-init-container"
            org.opencontainers.image.description="A container image that provides a minimal environment that can be used to run bash scripts with common utilities pre-installed."
          tags: |
            type=sha,format=long
            type=raw,value=latest

      # Build and push the Task Container Image
      - name: Build and push the Task Container Image
        id: build-push-image
        uses: docker/build-push-action@v6
        with:
          push: true
          args: |
            PACKAGES=${{ env.PACKAGES }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${ steps.meta.outputs.labels }
          cache-from: type=gha
          cache-to: type=gha,mode=max
  scan:
    name: Generate Vulnerability Report
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Generate vulnerability report using Trivy
      - name: Scan the Docker image with Trivy
        id: scan-image
        uses: aquasecurity/trivy-action@master
        with:
          scanners: vuln
          severity: CRITICAL,HIGH,MEDIUM
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          format: sarif
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          output: "${{ github.workspace }}/trivy-results.sarif"
      # Upload the Trivy vulnerability report as a GitHub artifact
      - name: Upload trivy vulnerability report as a Github artifact
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/trivy-results.sarif
  sbom:
    name: Generate SBOM
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Generate SBOM using trivy
      - name: Generate SBOM for the Docker image
        id: image-sbom
        uses: aquasecurity/trivy-action@master
        with:
          scanners: vuln
          severity: CRITICAL,HIGH,MEDIUM
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          format: github
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          output: "${{ github.workspace }}/trivy-results.sbom.json"

      # Upload the Trivy SBOM report as a GitHub artifact
      - name: Upload trivy SBOM report as a Github artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-report
          path: "${{ github.workspace }}/trivy-results.sbom.json"
          retention-days: 30
  attest:
    name: Generate Attestation
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Log into GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate attestation for the image and upload to the registry
      - name: Generate attestation for the image
        id: attest-image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          subject-digest: ${{ needs.build.outputs.digest }}
          push-to-registry: true
